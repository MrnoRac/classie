{"version":3,"sources":["classie/gen_table.cljs"],"mappings":"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","names":["classie.gen-table/reserved-names","classie.gen-table/check-field","field","classie.gen-table/conform-header","hdr","conformed","clojure.string/trim","clojure.string/replace","m","clojure.string/lower-case","conformed-length","cljs.core/count","cljs.core.subs","and__4221__auto__","cljs.core._EQ_","cljs.core/re-matches","classie.gen-table/map->cols","input","cljs.core.prn","p1__38042#","type-fn","cljs.core/map?","cljs.core/sequential?","cljs.core/boolean?","out","cljs.core.map","p__38043","vec__38044","cljs.core.nth","k","v","cljs.core.merge","cljs.core/PersistentHashMap","cljs.core/name","camel-snake-kebab.core/->snake_case","clojure.string/upper-case","cljs.core.into","cljs.core/sorted-map","cljs.core.sort_by","classie.gen-table/get-all-cols","data","data*","cols","row","cljs.core/first","new-cols","cljs.core/seq","cljs.core/rest","classie.gen-table/parse-obj","classie.gen-table/parse-json-string","in","js/JSON","clj-map","cljs.core.js__GT_clj","classie.gen-table/output","o","sb__4760__auto__","goog.string/StringBuffer","*print-newline*-orig-val__38047","cljs.core/*print-newline*","*print-fn*-orig-val__38048","cljs.core/*print-fn*","*print-newline*-temp-val__38049","*print-fn*-temp-val__38050","x__4761__auto__","cljs.pprint.pprint","classie.gen-table/process","s","e38051","parsed-obj","outgoing","re-frame.core/dispatch","e","js/console.log"],"sourcesContent":["(ns classie.gen-table\n  (:require [re-frame.core :as re-frame]\n            [clojure.pprint :as pprint]\n            [camel-snake-kebab.core :as csk]\n            [clojure.string :as str]))\n\n(def reserved-names\n  #{\"ignore\" \"else\" \"table\" \"percent\" \"permissions\" \"analyse\" \"recover\"\n    \"encrypt\" \"localtimestamp\" \"values\" \"unique\" \"rename\" \"using\"\n    \"trailing\" \"right\" \"freeze\" \"placing\" \"localtime\" \"top\" \"collate\"\n    \"of\" \"cast\" \"wallet\" \"off\" \"offset\" \"rejectlog\" \"cluster\"\n    \"references\" \"backup\" \"delete\" \"resort\" \"not\" \"encryption\"\n    \"mostly32\" \"intersect\" \"group\" \"parallel\" \"natural\" \"current_date\"\n    \"by\" \"long\" \"emptyasnull\" \"is\" \"delta\" \"cross\" \"null\" \"like\" \"user\"\n    \"binary\" \"union\" \"lzop\" \"grant\" \"new\" \"without\" \"gzip\" \"offline\"\n    \"option\" \"enable\" \"lun\" \"partition\" \"where\" \"timestamp\" \"for\"\n    \"increment\" \"snapshot\" \"text255\" \"overlaps\" \"truncatecolumns\"\n    \"minus\" \"session_user\" \"update\" \"alter\" \"globaldict64k\" \"exclusive\"\n    \"bytedict\" \"analyze\" \"any\" \"distinct\" \"immediate\" \"oid\" \"leading\"\n    \"false\" \"limit\" \"tag\" \"modify\" \"check\" \"similar\" \"drop\"\n    \"current_user\" \"both\" \"full\" \"connect\" \"nulls\" \"regexp\" \"outer\"\n    \"select\" \"primary\" \"or\" \"lzo\" \"identity\" \"start\" \"case\" \"disable\"\n    \"true\" \"current_timestamp\" \"on\" \"desc\" \"current\" \"old\" \"mostly13\"\n    \"when\" \"allowoverwrite\" \"asc\" \"having\" \"deferrable\" \"tablesample\"\n    \"and\" \"order\" \"column\" \"text32k\" \"delta32k\" \"explicit\" \"do\"\n    \"authorization\" \"blanksasnull\" \"whenever\" \"row\" \"between\" \"rlike\"\n    \"isnull\" \"from\" \"join\" \"insert\" \"notnull\" \"luns\" \"lock\" \"create\"\n    \"aes256\" \"current_time\" \"with\" \"ilike\" \"set\" \"inner\" \"foreign\"\n    \"some\" \"tdes\" \"bzip2\" \"deflate\" \"all\" \"exists\" \"maxextents\" \"then\"\n    \"system\" \"rows\" \"globaldict256\" \"restore\" \"sysdate\" \"raw\" \"open\"\n    \"respect\" \"current_user_id\" \"defrag\" \"only\" \"to\" \"trigger\"\n    \"credentials\" \"into\" \"mostly8\" \"except\" \"encode\" \"default\"\n    \"lateral\" \"as\" \"array\" \"readratio\" \"revoke\" \"end\" \"verbose\" \"left\"\n    \"sample\" \"constraint\" \"in\" \"initially\" \"aes128\"})\n\n\n(defn check-field [field]\n  (if (reserved-names field)\n    (str field \"_\")\n    field))\n\n\n(defn conform-header [hdr]\n  (let [conformed (-> hdr\n                      str/trim\n                      (str/replace #\"^[0-9]\" (fn [m]\n                                               (str \"_\" m)))\n                      (str/replace #\"\\W\" \"_\")\n                      (str/replace #\"\\p{C}\" \"\")\n                      str/lower-case\n                      check-field)\n        conformed-length (count conformed)]\n    (cond\n      (>= conformed-length 127)             (subs conformed 0 (- conformed-length 3))\n      (and (= conformed-length 1)\n           (re-matches #\"[\\d_]\" conformed)) (str conformed \"_column\")\n      :else conformed)))\n\n\n(defn map->cols\n  \"Generate the table definitions from a clojure hashmap\"\n  [input]\n  (prn \"map cols called\")\n  (let [type-fn #(cond\n                   (or (map? %) (sequential? %)) {:type \"text\" :json? true}\n                   (boolean? %) {:type \"boolean\"}\n                   :else {:type \"text\"})\n        out (->> input\n                 (map\n                   (fn [[k v]]\n                     (->> (merge\n                            (hash-map :key k\n                                      :name (-> (name k)\n                                                csk/->snake_case\n                                                conform-header\n                                                str/upper-case))\n                            (type-fn v))\n                          (into (sorted-map)))))\n                (sort-by :key)\n                (into []))]\n    out))\n\n(defn get-all-cols\n  \"Loops through the data and gets all the columns\"\n  [data]\n  (prn \"get-all called\")\n  (loop [data* data\n         cols {}]\n    (let [row (first data*)\n          new-cols (merge cols row)]\n      (if (seq data*)\n        (recur (rest data*) new-cols)\n        new-cols))))\n\n(defn parse-obj [data]\n  (prn \"initiating parsing\")\n  (if (sequential? data)\n    (-> (get-all-cols data) map->cols)\n    (map->cols data)))\n\n(defn parse-json-string\n  \"Parses a json string and generates the column definition\"\n  [in]\n  (prn \"turning to clj map\")\n  (let [data (.parse js/JSON in)\n        clj-map (js->clj data :keywordize-keys true)]\n    (parse-obj clj-map)))\n\n(defn output [o]\n  (with-out-str (pprint/pprint o)))\n\n(defn process [s]\n  (try (let [parsed-obj (parse-json-string s)\n             outgoing (output parsed-obj)]\n           (prn \"processed\")\n           (re-frame/dispatch [:update-outgoing outgoing]))\n       (catch :default e\n         (js/console.log e)\n         (re-frame/dispatch [:update-outgoing (str e)]))))\n"]}